#!/bin/bash

# This script is a way to set up or update your development environment automatically for Ubuntu 20.04.

# Exit if any subcommand fails
set -e

RUBY_VERSION=2.6.6

LIST_OF_20_04_DEPENDENCIES="git curl build-essential file libicu-dev libcurl4-openssl-dev libreadline-dev libssl-dev zlib1g-dev fonts-lato libsodium-dev qt5-default libqt5webkit5 imagemagick graphicsmagick libffi-dev libproj-dev libgeos-dev libffi-dev libgeos++-dev libpq-dev libxml2-dev libxslt1-dev tesseract-ocr tesseract-ocr-fra tesseract-ocr-eng pdftk libreoffice poppler-utils poppler-data ghostscript openjdk-11-jdk redis-server"
echo "Setup process for Ubuntu 20.04"
echo "🚚 Installing packages..."
sudo apt-get install -qq -y $LIST_OF_20_04_DEPENDENCIES
echo "✅ Packages installed"

# Set RUBY_VERSION to default value if empty
if [ -d "$HOME/.rbenv" ];
then
  echo "✅ Rbenv directory exist"
  git -C ~/.rbenv pull
  if [ -d "$HOME/.rbenv/plugins/ruby-build" ];
  then
    git -C ~/.rbenv/plugins/ruby-build pull
  fi
else
  echo "🚚 Installing Rbenv..."
  git clone https://github.com/rbenv/rbenv.git ~/.rbenv
  git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
  git -C ~/.rbenv/plugins/ruby-build pull
fi
echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$HOME/.rbenv/libexec:$HOME/.rbenv/bin:$HOME/.rbenv/shims:$PATH"' >> ~/.bashrc
echo 'eval "$(rbenv init -)"' >> ~/.bashrc
echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$HOME/.rbenv/libexec:$HOME/.rbenv/bin:$HOME/.rbenv/shims:$PATH"' >> ~/.profile
echo 'eval "$(rbenv init -)"' >> ~/.profile
. ~/.bashrc
. ~/.profile

# Install ruby version if not already
if rbenv versions | grep -q $RUBY_VERSION; then
  echo "✅ Ruby version $RUBY_VERSION is already installed."
else
  echo "✨ Ruby version $RUBY_VERSION is not installed. Installing..."
  rbenv install $RUBY_VERSION
  echo "✅ Ruby version $RUBY_VERSION installed."
fi
rbenv local $RUBY_VERSION
rbenv global $RUBY_VERSION
rbenv rehash

# Install nvm
if [ -d "$HOME/.nvm" ];
then
    echo "✅ Node.js directory exist"
else
  echo "🚚 Installing Node.js..."
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
  export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
  nvm install 14.17.4
  nvm alias default 14.17.4
  npm i -g yarn
  echo "✅ Node.js installed."
fi

DIR_POSTGRES=/etc/postgresql/13
if [ -d "$DIR_POSTGRES" ];
then
    echo "✅ Postgresql 13 directory exist"
else
  # Configure PostGres
  echo "🚚 Installing Postgresql && Postgis..."
  sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
  wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
  sudo apt-get update
  sudo apt-get install -qq -y postgresql-13 postgresql-client-13 postgresql-13-postgis-2.5 postgresql-13-postgis-2.5-scripts
  echo "✅ Postgresql 13 && Postgis 2.5 installed."
  # sudo -su postgres
  # createuser -d -P -s ekylibre
  # psql -c \"CREATE USER ekylibre WITH PASSWORD 'ekylibre';\"
  # psql -c \"ALTER USER ekylibre SUPERUSER; \"
  # echo "ALTER USER ekylibre SUPERUSER;" | psql
  if psql -t -c '\du' | cut -d \| -f 1 | grep -qw ekylibre; then
    echo "✅ Postgresql role ekylibre already exist."
  else
    sudo -u postgres bash -c "psql -c \"CREATE USER ekylibre WITH PASSWORD 'ekylibre';\""
    sudo -u postgres bash -c "psql -c \"ALTER USER ekylibre SUPERUSER;\""
    echo "✅ Postgresql role ekylibre created."
  fi

  # TODO : Edit pg_hba.conf to use md5 password authentication instead of peer authentication for unix sockets
  # Find and replace in file (local   all  all  peer) by (local  all  all md5)
  # sudo vim /etc/postgresql/13/main/pg_hba.conf
  echo "🛠️ Editing pg_hba.conf"
  file="/etc/postgresql/13/main/pg_hba.conf"
  sudo sed -i '/^local all all peer/ s/peer/md5/' $file
  echo "✅ Postgresql 13 setup OK."
fi

# replace Proj version with version working with Rgeo
# PROJ_VERSION=pkg-config --modversion proj
echo "🚚 Configuring Proj specific version ..."
sudo mkdir -p /opt/proj/share
sudo tar -xvzf bin/install/proj.tar.gz -C /opt/proj/share
echo "✅ Proj specific version installed."

# Java & Redis
echo 'export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64' >> ~/.bashrc
echo 'export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64' >> ~/.profile
. ~/.bashrc
. ~/.profile
echo "✅ Java path configured."
